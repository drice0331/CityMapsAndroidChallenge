package com.citymaps.userphotodisplay.util;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import com.citymaps.userphotodisplay.model.UserPhoto;
import com.citymaps.userphotodisplay.view.LoadingImageView;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.util.Log;
import android.util.LruCache;

public class PhotoDownloader<Token> extends HandlerThread{
	private static final String TAG = "PhotoDownloader";
	private static final int MESSAGE_DOWNLOAD = 0;
	private static final int CACHE_SIZE = 20;
	
	LruCache<String, Bitmap> cache;
	Handler mHandler;
	Map<Token, UserPhoto> requestMap = Collections.synchronizedMap(new HashMap<Token, UserPhoto>());
	
	Handler mResponseHandler;
	Listener<Token> mListener;
	
	ArrayList<UserPhoto> userPhotos;
	
	public interface Listener<Token> {
		void onThumbnailDownloaded(Token token, Bitmap thumbnail, UserPhoto photo);
	}
	
	public void setListener(Listener<Token> listener) {
		mListener = listener;
	}

	public PhotoDownloader(Handler responseHandler, ArrayList<UserPhoto> userPhotos) {
		super(TAG);
		mResponseHandler = responseHandler;
		this.userPhotos = userPhotos;
		//cache = new LruCache<String, Bitmap>(CACHE_SIZE);
	}
	
	@SuppressLint("HandlerLeak")
	@Override
	protected void onLooperPrepared() {
		mHandler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				if(msg.what == MESSAGE_DOWNLOAD) {
					@SuppressWarnings("unchecked")
					Token token = (Token)msg.obj;
					Log.i(TAG, "Got a request for url: " + requestMap.get(token));
					handleRequest(token);
				}
				Log.i(TAG, "what = " + msg.what);
			}
		};
	}
	
	public void queueThumbnail(Token token, UserPhoto url) {
		Log.i(TAG, "got an URL: " + url.getUrl());
		
		requestMap.put(token, url);
		
		mHandler.obtainMessage(MESSAGE_DOWNLOAD, token).sendToTarget();
	}
	
	public void clearQueue() {
		mHandler.removeMessages(MESSAGE_DOWNLOAD);
		requestMap.clear();
	}
	
	private void handleRequest(final Token token) {
		try {
			final UserPhoto url = requestMap.get(token);
			if(url == null) {
				return;
			}
			
			//TODO - cache part - check
			//Bitmap bitmapFromCache = (Bitmap) cache.get(url);
			final Bitmap bitmap;
			
			//if(bitmapFromCache == null) {
				byte [] bitmapBytes = new UserJsonParser().getUrlBytes(url.getUrl());
				bitmap = BitmapFactory.decodeByteArray(bitmapBytes, 0, bitmapBytes.length);
				//cache.put(url, bitmap);
				Log.i(TAG, "Bitmap created");
				url.setBitmapLoaded(true);
			//} else {
			//	bitmap = bitmapFromCache;
			//}
			
			
			
			mResponseHandler.post(new Runnable() {
				public void run() {
					if(requestMap.get(token) != url) return;
					
					requestMap.remove(token);
					mListener.onThumbnailDownloaded(token, bitmap, url);
				}
			});
			
			if(token.getClass().equals(LoadingImageView.class)) {
				
			}
		} catch (IOException ioe) {
			Log.e(TAG, "Error downloading image", ioe);
		}
	}
}
