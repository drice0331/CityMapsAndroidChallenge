package com.citymaps.userphotodisplay.adapter;

import java.util.ArrayList;

import com.citymaps.userphotodisplay.R;
import com.citymaps.userphotodisplay.model.UserPhoto;
import com.citymaps.userphotodisplay.util.PhotoDownloader;
import com.citymaps.userphotodisplay.view.LoadingImageView;
import com.squareup.picasso.Picasso;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;

public class LoadingGridViewAdapter extends BaseAdapter {

	Context mContext;
	PhotoDownloader<LoadingImageView> mPhotoDownloaderThread;
	ArrayList<UserPhoto> mItems;

	public LoadingGridViewAdapter(Context context, ArrayList<UserPhoto> items,
			PhotoDownloader<LoadingImageView> photoDownloaderThread) {
		mItems = items;
		mContext = context;
		mPhotoDownloaderThread = photoDownloaderThread;

	}

	public class ViewHolder {
		LoadingImageView imageView;
	}

	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {
		final ViewHolder holder;
		if (convertView == null) {
			holder = new ViewHolder();
			LayoutInflater infalInflater = (LayoutInflater) this.mContext
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = infalInflater.inflate(R.layout.list_item_photo, null);
			holder.imageView =(LoadingImageView) convertView
					.findViewById(R.id.gallery_item_imageView);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder)convertView.getTag();
		}

		Picasso.with(mContext)
			.load(mItems.get(position).getUrl())
			.resize(240, 600)
			.into(holder.imageView);
		
		//LoadingImageView imageView = (LoadingImageView) convertView
		//		.findViewById(R.id.gallery_item_imageView);
		//imageView.setImageResource(R.drawable.brian_up_close);
		//UserPhoto item = getItem(position);

		// TODO - use UserPhoto to determine
		//if (item.isBitmapLoaded() == false) {
		//mPhotoDownloaderThread.queueThumbnail(holder.imageView, mItems.get(position));
		//	item.setBitmapLoaded(true);
		//}

		Log.d("ADAPTER", "position is " + position);
		return convertView;
	}

	@Override
	public int getCount() {
		return mItems.size();
	}

	@Override
	public Object getItem(int position) {
		return mItems.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}
}
